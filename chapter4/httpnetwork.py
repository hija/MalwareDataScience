import argparse
import os
import re
import subprocess

valid_hostname_suffixes = ['com', 'de', 'org', 'eu', 'net', 'co', 'us']
hostname_to_app = dict()

def build_graph(path):

    # Analyzing PE-Files
    for file in os.listdir(path):
        if os.path.isfile(os.path.join(path, file)):
            if is_pefile(os.path.join(path, file)):
                print('[*] Analyzing PE-File', file)

                strings_in_file = get_strings(os.path.join(path, file))
                candidate_hostnames = re.findall( r'(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}', strings_in_file)
                valid_hostnames = list(filter(lambda hostname: hostname.split(".")[-1].lower() in valid_hostname_suffixes, candidate_hostnames))

                for hostname in valid_hostnames:
                    current_apps_for_hostname = hostname_to_app.get(hostname, [])
                    if not file in current_apps_for_hostname:
                        current_apps_for_hostname.append(file)
                        hostname_to_app[hostname] = current_apps_for_hostname

    ### Build graph
def get_strings(filepath):
    strings = subprocess.Popen(['strings', '-u', '-nobanner', '{}'.format(filepath)], stdout=subprocess.PIPE).communicate()[0]
    return strings.decode('utf-8')

def is_pefile(filepath):
    return open(filepath, 'rb').read(2) == b'MZ'

parser = argparse.ArgumentParser(description='Creates a dotfile for http-network from files')
parser.add_argument('path', help='The path in which the pe files are stored')
args = parser.parse_args()
build_graph(args.path)
